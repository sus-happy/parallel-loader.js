/**/var PARALLEL_LOADER = {	importLists:[],	loadLists:[],	loadedLists:[],	activeFlag:false,	loadFlag:[],	evalFlag:[],	length:0,	func:null,	directory:""};( function(_w) {	var currentScript = (function (e) { if(e.nodeName.toLowerCase() == 'script') return e; return arguments.callee(e.lastChild) })(document);	var initLoads = eval("("+currentScript.innerHTML+")");	function init() {		PARALLEL_LOADER.addScript( initLoads, null );		PARALLEL_LOADER.loadStart();	}	/*		import function	*/	PARALLEL_LOADER.addScript = function(importList, fn) {		this.importLists.push( {			list:importList,			func:fn		} );	}	PARALLEL_LOADER.setDirectory = function( dir ) {		this.directory = dir;	}	PARALLEL_LOADER.loadStart = function() {		if( this.importLists.length ) {			if(! this.loadLists ) this.loadLists = [];			this.loadLists.push( this.importLists.shift() );			if(! this.activeFlag ) {				this.loadInit( this.loadLists.shift() );			}		}	}	PARALLEL_LOADER.loadInit = function( target ) {		this.activeFlag = true;		this.length = target.list.length;		this.loadFlag = []; this.evalFlag = []; this.loadedLists = [];		for( var i=0; i<this.length; i++ ) {			this.loadFlag[i] = false;			this.evalFlag[i] = false;			this.loadedLists[i] = false;		}				this.func = target.func;		this.loadLoop( target.list );	}	PARALLEL_LOADER.loadLoop = function( loadList ) {		var that = this;		var cnt = 0;		while( loadList.length ) {			that.loadProgress( loadList.shift(), cnt );			cnt ++;		}	}	PARALLEL_LOADER.loadProgress = function(libName, index) {		var fullpath = this.directory + libName + '.js';		var that = this;		var httpObj;		var getJsData = function(e) {			if ((httpObj.readyState == 4) && (httpObj.status == 200)) {				that.loadedLists[index] = httpObj.responseText;				that.loadCheck( index );			}		}		httpObj = createXMLHttpRequest( getJsData );		if (httpObj) {			httpObj.open("GET", fullpath, true);			httpObj.send(null);		}	}	PARALLEL_LOADER.loadCheck = function( index ) {		this.loadFlag[index] = true;		for( var i=0; i<this.length; i++ ) {			if(! this.loadFlag[i] ) {				return false;			}			if(! this.evalFlag[i] ) {				this.makeScript( this.loadedLists[i] );				this.evalFlag[i] = true;			}		}		this.loadEnd();	}	PARALLEL_LOADER.makeScript = function( scr ) {		if( document.uniqueID ) { /* if IE */			var s = document.createElement("span");			s.innerHTML = "&nbsp;<script defer='defer' type='text/javascript'>"+scr+"</script>";			document.body.appendChild(s);		} else { /* if NOT IE */			var s = document.createElement('script');			s.type = 'text/javascript';			s.charset = 'utf-8';			s.appendChild(document.createTextNode(scr));			s.setAttribute('defer', 'defer');			currentScript.parentNode.insertBefore(s, currentScript);		}	}	PARALLEL_LOADER.loadEnd = function() {		if( this.func )			this.func();		if( this.loadLists.length > 0 ) {			this.loadInit( this.loadLists.shift() );		} else {			this.activeFlag = false;		}	}		function createXMLHttpRequest(cbFunc) {		var XMLhttpObject = null;		try{			XMLhttpObject = new XMLHttpRequest();		}catch(e){			try{				XMLhttpObject = new ActiveXObject("Msxml2.XMLHTTP");			}catch(e){				try{					XMLhttpObject = new ActiveXObject("Microsoft.XMLHTTP");				}catch(e){					return null;				}			}		}		if (XMLhttpObject) XMLhttpObject.onreadystatechange = cbFunc;		return XMLhttpObject;	}		if( document.uniqueID )		_w.onload = init;	else		init();} )(window);